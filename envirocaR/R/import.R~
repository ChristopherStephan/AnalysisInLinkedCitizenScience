#' Imports the envirocar data
#' 
#' @param serverUrl url to server
#' @param trackIDs ids of tracks that should be retrieved
#' @param bbox spatial bounding box
#' @param timeInterval interval
#' @return Tracks objects for the requested tracks
#' TODO: unclear how to encode temporalFilter!!
#' 
importEnviroCar = function(serverUrl, trackIDs, bbox, timeInterval) {
  require(rjson) # fromJSON
  require(maptools) # spCbind
  require(rgdal) #readOGR
  require(RCurl) #getURL
  require(stringr) #str_replace_all
  require(spacetime) #Tracks
  
  if (missing(trackIDs)){
    trackIDs = getTrackIDs()
  }
  
  # read data as spatial object:
  layer = readOGR(getURL(file,ssl.verifypeer = FALSE), layer = "OGRGeoJSON")
  
  # convert time from text to POSIXct:
  layer$time = as.POSIXct(layer$time, format="%Y-%m-%dT%H:%M:%SZ")
  # the third column is JSON, we want it in a table (data.frame) form:
  # 1. form a list of lists
  l1 = lapply(as.character(layer[[3]]), fromJSON)
  # 2. parse the $value elements in the sublist:
  l2 = lapply(l1,
              function(x) as.data.frame(lapply(x, function(X) X$value)))
  # create a matrix with all columns and then convert it to a data frame
  # thanks to Kristina Helle!
  # dynamic parsing of phenomenon names and units
  phenomenonsUrl = "https://www.envirocar.org/api/stable/phenomenons"
  phenomenons = fromJSON(getURL(phenomenonsUrl))
  colNames <- str_replace_all(sapply(phenomenons[[1]], "[[", "name"), pattern=" ", repl=".")
  
  resultMatrix = matrix(nrow=length(l2),ncol=length(colNames))
  dimnames(resultMatrix)[[2]]=colNames
  for (i in seq(along = l2))
    resultMatrix[i,names(l2[[i]])]=as.numeric(l2[[i]])
  result = as.data.frame(resultMatrix)
  
  # set the units:
  units <- sapply(phenomenons[[1]], "[[", "unit")
  names(units)=colNames
  
  # add a units attribute to layer
  layer[[3]] = NULL
  # add the table as attributes to the spatial object 
  if (length(layer) == nrow(result)) {
    layer = spCbind(layer, result)
    attr(layer, "units") = units
    layer
  } else
    NULL
}

#' Imports the envirocar data
#' 
#' @param bbox spatial bounding box
#' @param timeInterval interval
#' @return Tracks objects for the requested tracks
#' TODO: unclear how to encode temporalFilter!!
#' 
getTrackIDs <- function(serverUrl,bbox,timeInterval){
  library(RCurl)
  body = getURI( "https://envirocar.org/api/dev/tracks",ssl.verifypeer=FALSE,header=1)
  headerString = strsplit(body, split="[{]")[[1]][1]
  headerString
  header = parseHTTPHeader(headerString)
  header
  headerList=as.vector(header)
  headerList
  ?lapply
  lapply(headerList,parseLinkHeaderParam)
  headerParam = header["Link"]
  rel
  value(header)
  print(header)
  typeof(header)
}

#' Imports the envirocar data
#' 
#' @param serverUrl url to server
#' @param trackIDs ids of tracks that should be retrieved
#' @param bbox spatial bounding box
#' @param timeInterval interval
#' @return Tracks objects for the requested tracks
#' TODO: unclear how to encode temporalFilter!!
#'
parseLinkHeaderParam <- function(headerParam){
  if (grep("Link",headerParam)){
    lastpart=strsplit(headerParam,"&page=")[[1]][2]
    lastpartSplitted=strsplit(lastpart,"[>]")[[1]]
    pageNumberString = lastpartSplitted[1]
    rel = strsplit(strsplit(lastpartSplitted[2],"rel=")[[1]][2],";type")[[1]][1]
    c(pageNumberString,rel)
    }
  else NULL
}

#' function that is used to aggregate measurements of a Track object
#' 
#' @param track Track object that has to be aggregated
#' @param phen Phenomenon (a string) for aggregation (all phenomenons by default)
#' @param interval The interval size (a number) of measurements that have to be aggregated (20 by default)
#' @param fn Specification for aggregation function (mean by default)
#' @return aggregated Track obje
#'
#' TODO: aggregate over list of phenomenons; aggregation over time?
#'
aggregateTrack = function(track,phen,interval,fn){
  
  if (!missing(track)){
    
    if(missing (interval)){interval = 20} 
    tdf = track@data
    size = nrow(tdf)
    groupCount = ceiling(size/interval)
    remainder = interval*(groupCount-1)
    groupNr = 1
    
    #create groups for aggregation according to interval length
    for(i in 1:remainder){
      if (i!=1 && i%%interval == 1) {groupNr = groupNr + 1}
      tdf$Group[i] = groupNr
    }
    groupNr = groupCount
    for (j in (remainder+1):size){
      tdf$Group[j] = groupNr
    }
    
    #aggegation of values
    #if no phenomenon was specified, aggregate over the whole track
    if (missing (fn)){fn = mean}
    if (missing (phen)){ 
      aggrData = aggregate(tdf,list(tdf$Group),fn, rm.na=TRUE)
      #names(aggrData)[names(aggrData)=="Group.1"] <- "id"
      aggrData$id <- aggrData$Group-1
      aggrData$Group.1 <- NULL
      aggrData$Group <-NULL
      #TODO: add "aggr." in front of each attribute name
    }
    else {
      #a bit ugly: solving naming problem
      tdf2 = NULL
      tdf2 = as.list(tdf2)
      tdf2$time = tdf$time
      tdf2$phen = tdf[phen]
      
      #aggrData = aggregate(tdf[phen],list(tdf$Group),mean,rm.na=TRUE)
      aggrData = aggregate(tdf2,list(tdf$Group),fn,rm.na=TRUE)
      names(aggrData)[names(aggrData)==phen] <- paste("aggr",phen,sep=".")
      aggrData$id = aggrData$Group-1      
      aggrData$Group.1 <- NULL
      aggrData$Group <-NULL
      aggrData <- aggrData[,c(3,1,2)]
    }
    
    #time-slot:
    aggrTime = as.POSIXct(aggrData$time, format="%Y-%m-%dT%H:%M:%SZ")
    
    #selecting coordinates
    indexList = list(1:groupCount)
    #for spatial points: take the point at half of each interval step as coord
    for (k in 1:groupCount){
      indx = k*interval-floor(interval/2)
      #print(indx)
      if(k<groupCount) {
        indexList[k] = indx 
      }else{
        lastIndx = floor((size-remainder)/2)+remainder
        #print(lastIndx)
        indexList[k] = lastIndx
      }
    }
    aggrSp <- track@sp[do.call(c,indexList)]
    
    #Create Track object from the data, time and spatial points
    aggrSTIDF = STIDF(geometry(aggrSp), aggrTime, aggrData)
    aggrTrack = Track(aggrSTIDF)
    
    return(aggrTrack)
  }
}